<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>题解：P13016 [GESP202506 六级] 最大因数</title>
    <link href="/2025/06/30/%E9%A2%98%E8%A7%A3%EF%BC%9AP13016-GESP202506-%E5%85%AD%E7%BA%A7-%E6%9C%80%E5%A4%A7%E5%9B%A0%E6%95%B0/"/>
    <url>/2025/06/30/%E9%A2%98%E8%A7%A3%EF%BC%9AP13016-GESP202506-%E5%85%AD%E7%BA%A7-%E6%9C%80%E5%A4%A7%E5%9B%A0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/ntgxfp57">更洛谷的观感体验</a></p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>这道题说了一棵特殊的树，其中每个节点 $k$（$2\leq k$）的父节点是 $k$ 的最大真因数（$k$ 的因数中除了 $k$ 本身外最大的因数）。根节点是 $1$。要处理多个查询，每个查询给出两个节点编号 $x$ 和 $y$，需要计算它们在树上的距离（即连接路径的边数）。</p><h2 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h2><p>每个节点的父节点是其最大真因数。例如：</p><ul><li>节点 $3$ 的父节点是 $1$（因为 $3$ 的因数是 $1,3$，最大真因数是 $1$）</li><li>节点 $8$ 的父节点是 $4$（$8$ 的因数是 $1,2,4,8$，最大真因数是 $4$）</li><li>节点 $15$ 的父节点是 $5$（$15$ 的因数是 $1,3,5,15$，最大真因数是 $5$）</li></ul><p>质数的父节点是 $1$，因为质数的最大真因数只能是 $1$。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对于每个查询 $(x,y)$，我们可以分别计算 $x$ 和 $y$ 到根节点1的路径，然后找到它们的最近公共祖先(LCA)，最后计算距离。</p><p>步骤：</p><ol><li>实现一个函数 <code>get_parent(k)</code>，返回 $k$ 的最大真因数</li><li>对于 $x$ 和 $y$，分别向上遍历到根节点，记录路径</li><li>找到 $x$ 和 $y$ 路径上的最后一个公共节点（LCA）</li><li>计算 $x$ 到 <code>LCA</code> 的距离和 $y$ 到 <code>LCA</code> 的距离之和</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 获取k的最大真因数</span><span class="token keyword">int</span> <span class="token function">get_parent</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//根节点没有父节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> k <span class="token operator">/</span> i<span class="token punctuation">;</span> <span class="token comment">//返回最大真因数</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// k是质数，父节点是1</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取从k到根的路径</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">get_path</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token function">get_parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> path<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算两点的距离</span><span class="token keyword">int</span> <span class="token function">get_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path_x <span class="token operator">=</span> <span class="token function">get_path</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path_y <span class="token operator">=</span> <span class="token function">get_path</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 找到LCA</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> path_x<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> path_y<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> path_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> path_y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度</strong>：每个查询的最坏情况是 $O(\sqrt{\smash[b]{x}} + \sqrt{\smash[b]{y}})$。因为 $q\leq1000$ 和 $x,y\leq 10^9$，所以可以过。</p><p><strong>空间复杂度</strong>：主要消耗在存储路径上，最坏情况下路径长度是$O(\log k)$。</p><div class="giscus"></div><script src="https://giscus.app/client.js"        data-repo="maqiyue114514/maqiyue114514.github.io"        data-repo-id="R_kgDOO_BDlA"        data-category="Announcements"        data-category-id="DIC_kwDOO_BDlM4Crztf"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="bottom"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆</title>
    <link href="/2024/11/17/%E5%A0%86/"/>
    <url>/2024/11/17/%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>今天来讲一下 堆（优先队列）。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>求最值问题。</p><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>模板题：<a href="https://www.luogu.com.cn/problem/P3378">P3378 【模板】堆</a>。</p><h2 id="带入"><a href="#带入" class="headerlink" title="带入"></a>带入</h2><p>让我们复习一下学过的最值问题。  </p><p>($l$ 为数组的长度)</p><ul><li>暴力 时间复杂度 $O(n l)$</li><li>线段树 用不了(无法增删)</li><li>单调队列 用不了(太惨了)</li><li>倍增(ST表) 用不了(只能处理静态的区间最值)</li></ul><p>很显然，没有算法可以AC这道题，我们需要新的算法。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>我们使用一种叫 堆（优先队列）的数据结构。<br>堆是一棵二叉树，有大根堆和小根堆。<br>大根堆：父节点 $&gt;$ 子节点。<br>小根堆：父节点 $&lt;$ 子节点。<br>此外，堆还是一个<strong>完全二叉树</strong>。<br>那堆如何进行增删查呢？<br>(虽然题目中需要使用小根堆，但这里为了讲解需要，下面都是大根堆)</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>这是一个大根堆。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/w9kn5qba.png"><br>我们增的步骤如下(例如插入20)。  </p><ol><li>先把数插在最后面。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/sc9tuvbn.png"></li><li>再和父节点交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/45iugwib.png"></li></ol><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>由于堆的约束，堆没有太多规律，所以查只会查根节点。<br>例如上面这个堆查询的结果就是 $100$。</p><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>跟查一样，只能删除根节点，那又该如何操作呢？</p><ol><li>当然先把根节点给删掉。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/jy1g74lk.png">  </li><li>把最后一个节点当做根节点。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/iqub7j21.png"></li><li>选择根节点的子节点中较大（如果是小根堆就较小）的值进行比较。<br>因为 $\max(70,20) &#x3D; 70$ ，所以 $10$ 要和 $70$ 进行比较，不满足，交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/lbk197mv.png"><br>因为 $\max(20,30) &#x3D; 30$ ，所以 $10$ 要和 $30$ 进行比较，不满足，交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/sg8zd82c.png"><br>因为 $10$ 已经到了最低端，没有子节点，所以结束。</li></ol><p>我们在执行步骤 3 的时候，发现执行完最后一次后，这棵树依然满足堆的特点，为什么呢？<br>这就要跟为什么要选择最大值进行比较有关系了。<br>我们试试用较小的值交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/3ti4nl1g.png"><br>我们发现由于 $70 &gt; 20$ 这个堆不是大根堆，而最大值改除了 $10$ 没有其他问题，所以应该找最大的比较。<br>（你说最大值比较不是有 $10$ 的问题吗，纯属巧合）<br>回答第一个问题，因为每次都在尝试把这个堆变成正常的堆，所以结束了，堆自然就正确了，而且每次最多只有可能有 $10$ 的问题，换完就没有错误了。  </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>(这里按题目是小根堆)</p><h3 id="定义变量和存储"><a href="#定义变量和存储" class="headerlink" title="定义变量和存储"></a>定义变量和存储</h3><p>如何存储一棵树，很简单，根节点编号为 $1$ ，编号为 $p$ 的点左节点的编号为 $p * 2$，右节点的编号则为 $p * 2 + 1$。<br>将这些升级为速度更快的位运算就为 <code>p &lt;&lt; 1</code> 和 <code>p &lt;&lt; 1 | 1</code>。</p><p>题目的数据范围是 $1 \le n \le 10 ^ 6$，堆又是一个完全二叉树，所以数组只用开 $10 ^ 6$ 就够了。<br>我们还需要一个 $l$，代表当前数组的长度。<br>当然，我们还要一个题目中给的数 $n$。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> tre<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h3><p>我们按照原先增的顺序进行操作。</p><p>先在堆的尾部加上值（添加的值为 $x$）。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">tre<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>再和父节点交换。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//注意，如果tre[l]是右节点的话/2会向下取整，所以不用担心</span>    <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>我们知道，这个过程不止一次，所以需要一个 <code>while</code> 循环。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//注意，如果交换了，p要变为自己的父节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>最后把它封装成函数。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//没有到顶</span><span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h3><p>直接用返回堆顶的值就行了。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h3><p>按照步骤原先删的步骤进行。</p><p>先把原来的值覆盖。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tre<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//注意要l--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>再像增一样弄。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//p始终维护一个子节点最小的值</span><span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token comment">//还有子节点</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//如果不用交换就满足了，直接退出</span>p <span class="token operator">=</span> q<span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//更新</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>封装成函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tre<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> p <span class="token operator">=</span> q<span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> tre<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tre<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> p <span class="token operator">=</span> q<span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> op<span class="token punctuation">,</span>x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="STL-做法"><a href="#STL-做法" class="headerlink" title="STL 做法"></a>STL 做法</h3><p>堆也被 STL 封装成模版了。  </p><p>模版名叫 <code>priority_queue</code>。<br>用法是这样的。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span>你的类型<span class="token operator">></span> q<span class="token punctuation">;</span><span class="token comment">//默认大根堆</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果你要小根堆请这样输入。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span>你的类型<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>你的类型<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>你的类型<span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token comment">//注意最后的>>，中间不加空格并且不开C++11会以为是右移</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>比如我有一个结构体用来封装请在中间插入这样一个函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>结构体名称 y<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    你的做法<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>它拥有 <code>push</code>，<code>top</code>，<code>pop</code> 等函数，用法如下。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向堆里插入x</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取堆首的值</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除堆首</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>最终代码：  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> op<span class="token punctuation">,</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="好题推荐"><a href="#好题推荐" class="headerlink" title="好题推荐"></a>好题推荐</h1><table><thead><tr><th align="center">题号</th><th align="center">题目</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">P3378</td><td align="center"><a href="https://www.luogu.com.cn/problem/P3378">【模板】堆</a></td><td align="center">普及−</td></tr><tr><td align="center">P1801</td><td align="center"><a href="https://www.luogu.com.cn/problem/P1801">黑匣子</a></td><td align="center">普及+&#x2F;提高</td></tr><tr><td align="center">P1168</td><td align="center"><a href="https://www.luogu.com.cn/problem/P1168">中位数</a></td><td align="center">普及+&#x2F;提高</td></tr><tr><td align="center">P1752</td><td align="center"><a href="https://www.luogu.com.cn/problem/P1752">点菜</a></td><td align="center">省选&#x2F;NOI−</td></tr><tr><td align="center">P2048</td><td align="center"><a href="https://www.luogu.com.cn/problem/P2048">[NOI2010] 超级钢琴</a></td><td align="center">省选&#x2F;NOI−</td></tr><tr><td align="center">P3644</td><td align="center"><a href="https://www.luogu.com.cn/problem/P3644">[APIO2015] 巴邻旁之桥</a></td><td align="center">省选&#x2F;NOI−</td></tr></tbody></table><h1 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h1><p>11&#x2F;24 修改了句子末尾应添加句号，且全文使用的句号应一致的问题。</p><div class="giscus"></div><script src="https://giscus.app/client.js"        data-repo="maqiyue114514/maqiyue114514.github.io"        data-repo-id="R_kgDOO_BDlA"        data-category="Announcements"        data-category-id="DIC_kwDOO_BDlM4Crztf"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="bottom"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
