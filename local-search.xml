<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>题解：P13016 [GESP202506 六级] 最大因数</title>
    <link href="/2025/06/30/%E9%A2%98%E8%A7%A3%EF%BC%9AP13016-GESP202506-%E5%85%AD%E7%BA%A7-%E6%9C%80%E5%A4%A7%E5%9B%A0%E6%95%B0/"/>
    <url>/2025/06/30/%E9%A2%98%E8%A7%A3%EF%BC%9AP13016-GESP202506-%E5%85%AD%E7%BA%A7-%E6%9C%80%E5%A4%A7%E5%9B%A0%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/ntgxfp57">更洛谷的观感体验</a></p><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>这道题说了一棵特殊的树，其中每个节点 $k$（$2\leq k$）的父节点是 $k$ 的最大真因数（$k$ 的因数中除了 $k$ 本身外最大的因数）。根节点是 $1$。要处理多个查询，每个查询给出两个节点编号 $x$ 和 $y$，需要计算它们在树上的距离（即连接路径的边数）。</p><h2 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h2><p>每个节点的父节点是其最大真因数。例如：</p><ul><li>节点 $3$ 的父节点是 $1$（因为 $3$ 的因数是 $1,3$，最大真因数是 $1$）</li><li>节点 $8$ 的父节点是 $4$（$8$ 的因数是 $1,2,4,8$，最大真因数是 $4$）</li><li>节点 $15$ 的父节点是 $5$（$15$ 的因数是 $1,3,5,15$，最大真因数是 $5$）</li></ul><p>质数的父节点是 $1$，因为质数的最大真因数只能是 $1$。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>对于每个查询 $(x,y)$，我们可以分别计算 $x$ 和 $y$ 到根节点1的路径，然后找到它们的最近公共祖先(LCA)，最后计算距离。</p><p>步骤：</p><ol><li>实现一个函数 <code>get_parent(k)</code>，返回 $k$ 的最大真因数</li><li>对于 $x$ 和 $y$，分别向上遍历到根节点，记录路径</li><li>找到 $x$ 和 $y$ 路径上的最后一个公共节点（LCA）</li><li>计算 $x$ 到 <code>LCA</code> 的距离和 $y$ 到 <code>LCA</code> 的距离之和</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 获取k的最大真因数</span><span class="token keyword">int</span> <span class="token function">get_parent</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//根节点没有父节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> k <span class="token operator">/</span> i<span class="token punctuation">;</span> <span class="token comment">//返回最大真因数</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// k是质数，父节点是1</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取从k到根的路径</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">get_path</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token function">get_parent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> path<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算两点的距离</span><span class="token keyword">int</span> <span class="token function">get_d</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path_x <span class="token operator">=</span> <span class="token function">get_path</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path_y <span class="token operator">=</span> <span class="token function">get_path</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 找到LCA</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> path_x<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> path_y<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> path_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> path_y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    cin <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_d</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p><strong>时间复杂度</strong>：每个查询的最坏情况是 $O(\sqrt{\smash[b]{x}} + \sqrt{\smash[b]{y}})$。因为 $q\leq1000$ 和 $x,y\leq 10^9$，所以可以过。</p><p><strong>空间复杂度</strong>：主要消耗在存储路径上，最坏情况下路径长度是$O(\log k)$。</p><div class="giscus"></div><script src="https://giscus.app/client.js"        data-repo="maqiyue114514/maqiyue114514.github.io"        data-repo-id="R_kgDOO_BDlA"        data-category="Announcements"        data-category-id="DIC_kwDOO_BDlM4Crztf"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="bottom"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>树</tag>
      
      <tag>GESP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础莫队</title>
    <link href="/2024/12/22/%E5%9F%BA%E7%A1%80%E8%8E%AB%E9%98%9F/"/>
    <url>/2024/12/22/%E5%9F%BA%E7%A1%80%E8%8E%AB%E9%98%9F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/article/n6xvprfs">更洛谷的观感体验</a>。</p><p>今天讲一下基础的莫队算法。</p><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p><a href="https://www.luogu.com.cn/problem/P2709"><img src="https://img.shields.io/badge/%E6%A8%A1%E6%9D%BF%E9%A2%98-P2709_%E5%B0%8FB%E7%9A%84%E8%AF%A2%E9%97%AE-yellow"></a></p><h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><p>每次统计每个数有几次，再累加，时间复杂度为 $O(nm)$。<br>0分（全 TLE） <del>不是这题卡这么紧</del>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> c<span class="token punctuation">;</span><span class="token comment">//直接开数组也可以</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//累加</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>ans <span class="token operator">+=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//加上平方</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>上面的暴力代码是在线的，而换成离线呢？<br>在线定义：输入后会立刻输出结果。<br>离线定义：输入完才会按顺序输出结果。</p><p>那我们就可以优化，下一个答案根据上一个答案转移出来。<br>定义一个 <code>add</code> 和 <code>del</code> 函数，用来添加和删除数据。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>那每次会对答案加上多少呢？<br>$c_i$ 加上 $1$ 的平方和 $c_i^2$ 的差，$(c_i + 1) ^ 2 - c_i ^ 2$。<br>$(c_i + 1) ^ 2 - c_i ^ 2 \<br>&#x3D; (c_i + 1 + c_i)(c_i + 1 - c_i)\<br>&#x3D;2c_i + 1$</p><p>减去也一样。<br>$c_i ^ 2 - (c_i - 1) ^ 2\<br>&#x3D;(c_i + c_i - 1)(c_i - c_i + 1)\<br>&#x3D;2c_i - 1$  </p><p>上代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>q<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">-=</span> <span class="token number">2</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ql <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span> qr <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token comment">/*注意，应该先写扩大再缩小，不然可能会负数*/</span><span class="token comment">/*先扩大再添加*/</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">></span> ql<span class="token punctuation">)</span> l<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> qr<span class="token punctuation">)</span> r<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*先删除再缩小*/</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> ql<span class="token punctuation">)</span> <span class="token function">del</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">></span> qr<span class="token punctuation">)</span> <span class="token function">del</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">--</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>全 TLE</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><code>add</code> 和 <code>del</code> 的时间复杂度为 $O(1)$，<br>每次扩大或缩小时间复杂度<strong>最坏</strong>为 $O(n)$，<br>一共执行了 $m$ 次扩大缩小。<br>时间复杂度为 $O(nm)$ <del>没优化？</del>。</p><h2 id="再优化"><a href="#再优化" class="headerlink" title="再优化"></a>再优化</h2><h3 id="思路和代码"><a href="#思路和代码" class="headerlink" title="思路和代码"></a>思路和代码</h3><p>我们发现如果排序了数组就可以优化时间复杂度，可如何排序呢？</p><p>我们把一个 $a$ 这个数组分成几个区间，每个区间长度为 $B$。<br>$B &#x3D; 2$ 时，图是这样的：<br>$\Box\Box|\Box\Box|\Box\Box|\Box\Box|\Box$。<br>我们统一排序右端点，得到以下表达式：<br><code>cmp</code>:$\begin{cases}x.l &lt; y.l &amp; \text{if} &amp; \frac{x.l}{B} &#x3D; \frac{y.l}{B}\  x.r &lt; y.r &amp; \end{cases}$<br>写出代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>point x<span class="token punctuation">,</span> point y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>l <span class="token operator">/</span> B <span class="token operator">!=</span> y<span class="token punctuation">.</span>l <span class="token operator">/</span> B<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>l <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>那 $B$ 选几合适呢？<br>设 $\sqrt{n}$，这样就可以分成 $n$ 个区间。</p><p>上代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> now<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//now为当前的答案，ans[i]为第i个询问的答案</span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>q<span class="token punctuation">[</span><span class="token number">50010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>point x<span class="token punctuation">,</span> point y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>l <span class="token operator">/</span> B <span class="token operator">!=</span> y<span class="token punctuation">.</span>l <span class="token operator">/</span> B<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>l <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token punctuation">.</span>r <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>now <span class="token operator">+=</span> <span class="token number">2</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>now <span class="token operator">-=</span> <span class="token number">2</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span> <span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//记录每个点原来的id</span><span class="token function">sort</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ql <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">,</span> qr <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r id <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">></span> ql<span class="token punctuation">)</span> l<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> qr<span class="token punctuation">)</span> r<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> ql<span class="token punctuation">)</span> <span class="token function">del</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">></span> qr<span class="token punctuation">)</span> <span class="token function">del</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token operator">--</span><span class="token punctuation">;</span>ans<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> now<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://www.luogu.com.cn/record/195772927">AC记录</a>。</p><h3 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h3><p>设第 $i$ 个区间的最大 $l$ 为 $max_i$。<br>排序后：$max_1 \le max_2 … \le max_{\sqrt{n}}$。<br>每一次操作最坏的时间复杂度为 $O(n)$。<br>所有块的总和就是$O(n\sqrt{n})$。<br>重点分析 $l$：因为每一次改变的时间复杂度都是  $O(max_i-max_{i-1})$ 的，所以在同一块中时间复杂度为 $O(\sqrt{n}(max_i-max_{i-1}))$。<br>求和<br>$\begin{aligned}<br>&amp; O(\sqrt{n}(\max{}_1-1)+\sqrt{n}(\max{}_2-\max{}_1)+\sqrt{n}(\max{}<em>3-\max{}<em>2)+\cdots+\sqrt{n}(\max{}</em>{\lceil\sqrt{n}\rceil}-\max{}</em>{\lceil\sqrt{n}\rceil-1))} \<br>&#x3D; \phantom{} &amp; O(\sqrt{n}\cdot(\max{}<em>1-1+\max{}<em>2-\max{}<em>1+\max{}<em>3-\max{}<em>2+\cdots+\max{}</em>{\lceil\sqrt{n}\rceil-1}-\max{}</em>{\lceil\sqrt{n}\rceil-2}+\max{}</em>{\lceil\sqrt{n}\rceil}-\max{}</em>{\lceil\sqrt{n}\rceil-1)}) \<br>&#x3D; \phantom{} &amp; O(\sqrt{n}\cdot(\max{}</em>{\lceil\sqrt{n}\rceil-1}))\<br>\end{aligned}$</p><div class="giscus"></div><script src="https://giscus.app/client.js"        data-repo="maqiyue114514/maqiyue114514.github.io"        data-repo-id="R_kgDOO_BDlA"        data-category="Announcements"        data-category-id="DIC_kwDOO_BDlM4Crztf"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="bottom"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>特殊技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>特殊技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tarjan</title>
    <link href="/2024/12/15/Tarjan/"/>
    <url>/2024/12/15/Tarjan/</url>
    
    <content type="html"><![CDATA[<p>今天来讲一下 <code>Tarjan</code>。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>割点缩点。</p><h1 id="dfn-和-low"><a href="#dfn-和-low" class="headerlink" title="dfn 和 low"></a><code>dfn</code> 和 <code>low</code></h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先上一个图：<br><img src="https://oi-wiki.org/graph/images/cut1.svg"><br>Tarjan是这样操作的：<br>首先，用dfs遍历图，按照遍历的顺序给每个点打上时间戳（为<code>dfn</code>），每个点的时间戳如下（每个点右上角的数字为该点的 <code>dfn</code>）：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/99x6rete.png"><br>再定义一个数组 <code>low</code>，为不经过其父亲能到达的最小的时间戳。<br>什么意思？其实不懂也没有关系 <del>本蒟蒻开始读也没读懂</del>。<br>换一个说法，就是不经过从起点到这个点已经经过的点，可以走到的最小时间戳。<br>步骤如下：（每个点右上角为该点的 <code>dfn,low</code>）<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/l3vsewzh.png">  </p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="更新-low"><a href="#更新-low" class="headerlink" title="更新 low"></a>更新 <code>low</code></h3><p>如何实现更新 <code>low</code>?<br>我们发现，上图的点有 $3$ 种 <code>low</code> ：  </p><ul><li>是下一个节点的 <code>dfn</code>（图中的 $3,6$）</li><li>是下一个节点的 <code>low</code>（图中的 $2,4,5$）</li><li>为 $1$（图中的 $1$）</li></ul><p>分别满足以下条件:  </p><ul><li>下一个节点是自己的父节点（已经经过的点）</li><li>下一个节点是自己的子节点（还未到达过的点）</li><li>是图的根</li></ul><p>实现代码：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//u为当前边的起点，v为终点，root为根</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> root<span class="token punctuation">)</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>  low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>我们发现当点是根时，不需要特判，因为 $1$ 是图中最小的 <code>low</code> 和 <code>dfn</code>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//u为当前边的起点，v为终点，root为根</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="实现初始化-dfn-和-low"><a href="#实现初始化-dfn-和-low" class="headerlink" title="实现初始化 dfn 和 low"></a>实现初始化 <code>dfn</code> 和 <code>low</code></h3><p>因为可能是非连通图，所以可能有多个根，调用时的代码如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//……</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//……</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用链式前向星存图的童鞋看这：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//hd[i]为最后一条以i点为起点的边的编号</span><span class="token comment">//e[i].v为编号为i这条边的终点</span><span class="token comment">//e[i].nxt为下一条以i这条边的起点为起点的边</span><span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> hd<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为这个点还未更新</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//……</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//……</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//……</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>用 <code>vector</code> 存图的童鞋看这：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//e[u][i]为起点为u的第i条边的终点</span><span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v <span class="token operator">:</span> e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为这个点还未更新，所以遍历这个点</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//……</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//……</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//……</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h1><p><a href="https://www.luogu.com.cn/problem/P3388"><img src="https://img.shields.io/badge/%E6%A8%A1%E6%9D%BF%E9%A2%98-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%89%B2%E7%82%B9%EF%BC%88%E5%89%B2%E9%A1%B6%EF%BC%89-blue"> <img src="https://img.shields.io/badge/%E9%9A%BE%E5%BA%A6-%E6%99%AE%E5%8F%8A+/%E6%8F%90%E9%AB%98-green"></a>  </p><h2 id="判定割点"><a href="#判定割点" class="headerlink" title="判定割点"></a>判定割点</h2><p>那满足什么是割点呢？<br>($u$ 为当前边的起点，$v$ 为终点，$root$ 为根，$sum$ 为子节点数量)<br>割点满足 $\begin{cases}dfn_u &gt; low_v &amp; \text{if} &amp; u \not &#x3D; root \ sum &gt; 1 &amp; \text{if} &amp; u &#x3D; root\end{cases}$<br>情况是这样的：<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/80gcv3te.png"><br><img src="https://cdn.luogu.com.cn/upload/image_hosting/gejydkn2.png"></p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>用链式前向星存图的童鞋看这：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">20010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> hd<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> tot<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">bool</span> iscut<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//为i这个点是否为割点</span><span class="token keyword">struct</span> <span class="token class-name">edge</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> v<span class="token punctuation">,</span> nxt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>e<span class="token punctuation">[</span>M <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> edge<span class="token punctuation">&#123;</span> v<span class="token punctuation">,</span>hd<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>hd<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span>e<span class="token punctuation">[</span><span class="token operator">++</span>tot<span class="token punctuation">]</span> <span class="token operator">=</span> edge<span class="token punctuation">&#123;</span> u<span class="token punctuation">,</span>hd<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>hd<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> tot<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> hd<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nxt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//子节点+1</span><span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> iscut<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> root <span class="token operator">&amp;&amp;</span> sum <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> iscut<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>ans <span class="token operator">+=</span> iscut<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iscut<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://www.luogu.com.cn/record/195364463">AC记录</a><br>用 <code>vector</code> 存图的童鞋看这：</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">20010</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token punctuation">;</span><span class="token keyword">bool</span> iscut<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add_edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">tarjan</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> v <span class="token operator">:</span> e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//子节点+1</span><span class="token function">tarjan</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> root <span class="token operator">&amp;&amp;</span> dfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> iscut<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> dfn<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> root <span class="token operator">&amp;&amp;</span> sum <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> iscut<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add_edge</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dfn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">tarjan</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>ans <span class="token operator">+=</span> iscut<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>iscut<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://www.luogu.com.cn/record/195364698">AC记录</a></p><div class="giscus"></div><script src="https://giscus.app/client.js"        data-repo="maqiyue114514/maqiyue114514.github.io"        data-repo-id="R_kgDOO_BDlA"        data-category="Announcements"        data-category-id="DIC_kwDOO_BDlM4Crztf"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="bottom"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>图论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆</title>
    <link href="/2024/11/17/%E5%A0%86/"/>
    <url>/2024/11/17/%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<p>今天来讲一下 堆（优先队列）。</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>求最值问题。</p><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>模板题：<a href="https://www.luogu.com.cn/problem/P3378">P3378 【模板】堆</a>。</p><h2 id="带入"><a href="#带入" class="headerlink" title="带入"></a>带入</h2><p>让我们复习一下学过的最值问题。  </p><p>($l$ 为数组的长度)</p><ul><li>暴力 时间复杂度 $O(n l)$</li><li>线段树 用不了(无法增删)</li><li>单调队列 用不了(太惨了)</li><li>倍增(ST表) 用不了(只能处理静态的区间最值)</li></ul><p>很显然，没有算法可以AC这道题，我们需要新的算法。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>我们使用一种叫 堆（优先队列）的数据结构。<br>堆是一棵二叉树，有大根堆和小根堆。<br>大根堆：父节点 $&gt;$ 子节点。<br>小根堆：父节点 $&lt;$ 子节点。<br>此外，堆还是一个<strong>完全二叉树</strong>。<br>那堆如何进行增删查呢？<br>(虽然题目中需要使用小根堆，但这里为了讲解需要，下面都是大根堆)</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>这是一个大根堆。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/w9kn5qba.png"><br>我们增的步骤如下(例如插入20)。  </p><ol><li>先把数插在最后面。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/sc9tuvbn.png"></li><li>再和父节点交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/45iugwib.png"></li></ol><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>由于堆的约束，堆没有太多规律，所以查只会查根节点。<br>例如上面这个堆查询的结果就是 $100$。</p><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>跟查一样，只能删除根节点，那又该如何操作呢？</p><ol><li>当然先把根节点给删掉。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/jy1g74lk.png">  </li><li>把最后一个节点当做根节点。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/iqub7j21.png"></li><li>选择根节点的子节点中较大（如果是小根堆就较小）的值进行比较。<br>因为 $\max(70,20) &#x3D; 70$ ，所以 $10$ 要和 $70$ 进行比较，不满足，交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/lbk197mv.png"><br>因为 $\max(20,30) &#x3D; 30$ ，所以 $10$ 要和 $30$ 进行比较，不满足，交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/sg8zd82c.png"><br>因为 $10$ 已经到了最低端，没有子节点，所以结束。</li></ol><p>我们在执行步骤 3 的时候，发现执行完最后一次后，这棵树依然满足堆的特点，为什么呢？<br>这就要跟为什么要选择最大值进行比较有关系了。<br>我们试试用较小的值交换。<br><img src="https://cdn.luogu.com.cn/upload/image_hosting/3ti4nl1g.png"><br>我们发现由于 $70 &gt; 20$ 这个堆不是大根堆，而最大值改除了 $10$ 没有其他问题，所以应该找最大的比较。<br>（你说最大值比较不是有 $10$ 的问题吗，纯属巧合）<br>回答第一个问题，因为每次都在尝试把这个堆变成正常的堆，所以结束了，堆自然就正确了，而且每次最多只有可能有 $10$ 的问题，换完就没有错误了。  </p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>(这里按题目是小根堆)</p><h3 id="定义变量和存储"><a href="#定义变量和存储" class="headerlink" title="定义变量和存储"></a>定义变量和存储</h3><p>如何存储一棵树，很简单，根节点编号为 $1$ ，编号为 $p$ 的点左节点的编号为 $p * 2$，右节点的编号则为 $p * 2 + 1$。<br>将这些升级为速度更快的位运算就为 <code>p &lt;&lt; 1</code> 和 <code>p &lt;&lt; 1 | 1</code>。</p><p>题目的数据范围是 $1 \le n \le 10 ^ 6$，堆又是一个完全二叉树，所以数组只用开 $10 ^ 6$ 就够了。<br>我们还需要一个 $l$，代表当前数组的长度。<br>当然，我们还要一个题目中给的数 $n$。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> tre<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h3><p>我们按照原先增的顺序进行操作。</p><p>先在堆的尾部加上值（添加的值为 $x$）。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">tre<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>再和父节点交换。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//注意，如果tre[l]是右节点的话/2会向下取整，所以不用担心</span>    <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>l <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>我们知道，这个过程不止一次，所以需要一个 <code>while</code> 循环。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//注意，如果交换了，p要变为自己的父节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>最后把它封装成函数。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//没有到顶</span><span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h3><p>直接用返回堆顶的值就行了。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h3><p>按照步骤原先删的步骤进行。</p><p>先把原来的值覆盖。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tre<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//注意要l--</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>再像增一样弄。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//p始终维护一个子节点最小的值</span><span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token comment">//还有子节点</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//如果不用交换就满足了，直接退出</span>p <span class="token operator">=</span> q<span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//更新</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>封装成函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tre<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> p <span class="token operator">=</span> q<span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> tre<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token operator">++</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>p <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>tre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tre<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> tre<span class="token punctuation">[</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">></span> tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>tre<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>tre<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> p <span class="token operator">=</span> q<span class="token punctuation">,</span>q <span class="token operator">=</span> p <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> op<span class="token punctuation">,</span>x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="STL-做法"><a href="#STL-做法" class="headerlink" title="STL 做法"></a>STL 做法</h3><p>堆也被 STL 封装成模版了。  </p><p>模版名叫 <code>priority_queue</code>。<br>用法是这样的。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span>你的类型<span class="token operator">></span> q<span class="token punctuation">;</span><span class="token comment">//默认大根堆</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果你要小根堆请这样输入。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span>你的类型<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>你的类型<span class="token operator">></span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span>你的类型<span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token comment">//注意最后的>>，中间不加空格并且不开C++11会以为是右移</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>比如我有一个结构体用来封装请在中间插入这样一个函数。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>结构体名称 y<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    你的做法<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>它拥有 <code>push</code>，<code>top</code>，<code>pop</code> 等函数，用法如下。  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向堆里插入x</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取堆首的值</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除堆首</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>最终代码：  </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> op<span class="token punctuation">,</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="好题推荐"><a href="#好题推荐" class="headerlink" title="好题推荐"></a>好题推荐</h1><table><thead><tr><th align="center">题号</th><th align="center">题目</th><th align="center">难度</th></tr></thead><tbody><tr><td align="center">P3378</td><td align="center"><a href="https://www.luogu.com.cn/problem/P3378">【模板】堆</a></td><td align="center">普及−</td></tr><tr><td align="center">P1801</td><td align="center"><a href="https://www.luogu.com.cn/problem/P1801">黑匣子</a></td><td align="center">普及+&#x2F;提高</td></tr><tr><td align="center">P1168</td><td align="center"><a href="https://www.luogu.com.cn/problem/P1168">中位数</a></td><td align="center">普及+&#x2F;提高</td></tr><tr><td align="center">P1752</td><td align="center"><a href="https://www.luogu.com.cn/problem/P1752">点菜</a></td><td align="center">省选&#x2F;NOI−</td></tr><tr><td align="center">P2048</td><td align="center"><a href="https://www.luogu.com.cn/problem/P2048">[NOI2010] 超级钢琴</a></td><td align="center">省选&#x2F;NOI−</td></tr><tr><td align="center">P3644</td><td align="center"><a href="https://www.luogu.com.cn/problem/P3644">[APIO2015] 巴邻旁之桥</a></td><td align="center">省选&#x2F;NOI−</td></tr></tbody></table><h1 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h1><p>11&#x2F;24 修改了句子末尾应添加句号，且全文使用的句号应一致的问题。</p><div class="giscus"></div><script src="https://giscus.app/client.js"        data-repo="maqiyue114514/maqiyue114514.github.io"        data-repo-id="R_kgDOO_BDlA"        data-category="Announcements"        data-category-id="DIC_kwDOO_BDlM4Crztf"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="bottom"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P5731【深基5.习6】蛇形方阵 题解</title>
    <link href="/2024/07/27/P5731%E3%80%90%E6%B7%B1%E5%9F%BA5-%E4%B9%A06%E3%80%91%E8%9B%87%E5%BD%A2%E6%96%B9%E9%98%B5-%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/07/27/P5731%E3%80%90%E6%B7%B1%E5%9F%BA5-%E4%B9%A06%E3%80%91%E8%9B%87%E5%BD%A2%E6%96%B9%E9%98%B5-%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://www.luogu.com.cn/problem/P5731">题目传送门</a>。<br>没什么可说的，直接跳过。</p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>仔细观察输出，可以发现输出可以当做输出几个方框。</p><p>这样我们只要画出每个正方形就可以了。</p><h3 id="Code实现"><a href="#Code实现" class="headerlink" title="Code实现"></a>Code实现</h3><p>首先输入不用说了吧。 <del>不会真有人不会吧</del></p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span><span class="token comment">//万能头启动</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//不用说了吧，跟题目中名字一样</span>  cin <span class="token operator">>></span> n<span class="token punctuation">;</span><span class="token comment">//cin直接输入</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>要存答案，就要数组 <del>因为是题单主题</del> 所以我创建了二位数组 $a$ 来存放答案。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用10正好存下最大9</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>当前生成的方框的边长我用了 $m$ 来存，当前生成的坐标我用了 $x$ 和 $y$ 存。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//注释君摸鱼了</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>我是用数字为线索开始for循环的，注意，是 $n × n$。 </p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//你别管我这样写，后面有用处</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>判断当前的点的位置是否是在上端，在下端，在左端或右端。<br>判断上端: $x &#x3D;&#x3D; 1 + (n - m) &#x2F; 2$。<br>判断下端: $x &#x3D;&#x3D; n - ((n - m) &#x2F; 2)$。<br>判断左右端: 看啥呢，直接用else。</p><p>开始填if,这个过程直接上code <del>懒得写了</del>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment">//最上面</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    x<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>     y<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//最下面</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    x<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    y<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">else</span>                            <span class="token comment">//左右两端</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//左端</span>    x<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>                    <span class="token comment">//右端</span>    x<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>现在再写上赋值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>最终判断一下是否画完当前方框。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  m <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>输出不写了<del>无量</del>。</p><p>最终整合代码。</p><h3 id="最终代码来啦！！！"><a href="#最终代码来啦！！！" class="headerlink" title="最终代码来啦！！！"></a>最终代码来啦！！！</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> n<span class="token punctuation">,</span>m <span class="token operator">=</span> n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>        y<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        x<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token keyword">else</span>        y<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>                                 <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>                x<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                                    x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            m <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>你最好别复制?<del>想要名字变成棕色的可以</del></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这是我的第一篇题解，希望各位大佬们可以帮我纠纠错，支持一下。</p><div class="giscus"></div><script src="https://giscus.app/client.js"        data-repo="maqiyue114514/maqiyue114514.github.io"        data-repo-id="R_kgDOO_BDlA"        data-category="Announcements"        data-category-id="DIC_kwDOO_BDlM4Crztf"        data-mapping="pathname"        data-strict="0"        data-reactions-enabled="1"        data-emit-metadata="0"        data-input-position="bottom"        data-theme="preferred_color_scheme"        data-lang="zh-CN"        crossorigin="anonymous"        async></script>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
